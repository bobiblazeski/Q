/**
 * Sorts the list according to a key generated by the supplied function.
 *
 * @func
 * @memberOf Q
 * @category relation
 * @sig (a -> String) -> [a] -> [a]
 * @param {Function|String} f The function mapping `list` items to keys, or property string.
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `f`.
 * @example
 *
 * var entries = [{ name: 'ALICE', age: 101 }, {name: 'Bob',age: -400},{name: 'clara',age: 314.159}];
 * Q.sort(function(d){ return Math.abs(d.age);},entries)
 * => [{"name":"ALICE","age":101},{"name":"clara","age":314.159},{"name":"Bob","age":-400}]
 *  Q.sort("age", [{ name: 'ALICE', age: 101 }, {name: 'Bob',age: -400},{name: 'clara',age: 314.159}])
 * => [{"name":"Bob","age":-400},{"name":"ALICE","age":101},{"name":"clara","age":314.159}]
 *  Q.sort("-age", [{ name: 'ALICE', age: 101 }, {name: 'Bob',age: -400},{name: 'clara',age: 314.159}])
 * =>[{"name":"clara","age":314.159},{"name":"ALICE","age":101},{"name":"Bob","age":-400}]
 */
var order = _curry2(function sortBy(fn, list) {
    return _pluck('val', _keyValue(typeof fn == 'function' ? fn : prop(fn), list).sort(_compareKeys));
});